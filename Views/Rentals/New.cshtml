
@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>

<form id="newRental">
    @* Zencoding: div.form-group>label+input[type="text"].form-control*@
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" type="text" required value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" type="text" value="" class="form-control" />
        </div>
    </div>


    <div class="form-group">
        @* div.row>div.col_md-4.col-sm-4*@
        <div class="row">
            <div class="col_md-4 col-sm-4">
                <ul id="movies" class="list-group"></ul>
            </div>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {

            var vm = {
                movieIds: []
            };

            var typeaheadSettings = {
                minLength: 3,
                highlight: true
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                // prefetch: '../data/films/post_1960.json',
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead(typeaheadSettings, {
                name: 'customer',
                display: 'name',
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
                console.log('vm.customerId = ' + vm.customerId);
            });


            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                // prefetch: '../data/films/post_1960.json',
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });


            $('#movie').typeahead(typeaheadSettings, {
                name: 'movie',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                $("#movie").typeahead("val", "");
                vm.movieIds.push(movie.id);
                console.log('vm.movieId = ' + movie.id);
                // rerun the validator to clear the message
                //$("#movie").valid();
                //or this 
                 validator.resetForm();
            });

            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");

            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie.");

            var validator = $("#newRental").validate({
                rules: {
                    customer: { validCustomer: true },
                    movie: { validMovie: true}
                },
                submitHandler: function () {
                    //e.preventDefault();
                    console.log("submit");
                    $.post({
                        url: "/api/newRentals",
                        data: vm
                    }).done(function () {
                        console.log("success");
                        toastr.success("Rentals successfully recorded");
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = {
                            movieIds: []
                        };

                        validator.resetForm();
                    }).fail(function () {
                        toastr.error("Rentals NOT recorded");
                    });

                    // disable default form submit.
                    return false;
                }

            });
        });
    </script>
}
